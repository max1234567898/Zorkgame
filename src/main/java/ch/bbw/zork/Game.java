package ch.bbw.zork;import java.util.ArrayList;import java.util.HashSet;import java.util.Stack;public class Game {		private Parser parser;	private Room currentRoom;	private Room outside, lab, tavern, gblock, office, secretRoom, bedroom;	private Item key, book, paperclip, gloves;	private ArrayList<Room> map;	private HashSet<Item> backpack;	private Stack<Room> previousRooms;	private boolean areItemsPlacedInSecretRoom;	public Game() {				parser = new Parser();				outside = new Room("outside G block on Peninsula campus");		lab = new Room("lab, a lecture theatre in A block");		tavern = new Room("the Seahorse Tavern (the campus pub)");		gblock = new Room("the G Block");		office = new Room("the computing admin office");		secretRoom = new Room("̶t̶̶h̶̶e̶̶ ̶̶s̶̶e̶̶c̶̶r̶̶e̶̶t̶̶ ̶̶r̶̶o̶̶o̶̶m̶");		bedroom = new Room("the bedroom");		outside.put(null, lab, gblock, tavern);		lab.put(null, null, null, outside);		tavern.put(null, outside, bedroom, null);		gblock.put(outside, office, null, bedroom);		office.put(null, null, secretRoom, gblock);		secretRoom.put(office, null, null, null);		bedroom.put(tavern, gblock, null, null);		currentRoom = outside;		previousRooms = new Stack<>();				map = new ArrayList<>();		map.add(outside);		map.add(lab);		map.add(tavern);		map.add(gblock);		map.add(office);		map.add(secretRoom);		map.add(bedroom);				key = new Item();		key.setName("key");		key.setWeight(40);				book = new Item();		book.setName("book");		book.setWeight(200);		paperclip = new Item();		paperclip.setName("paperclip");		paperclip.setWeight(70);		gloves = new Item();		gloves.setName("gloves");		gloves.setWeight(110);				lab.add(key);		bedroom.add(book);		office.add(paperclip);		tavern.add(gloves);				backpack = new HashSet<>();	}	public void play() {		printWelcome();		boolean finished = false;		while ( !finished ) {			Command command = parser.get();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Get all four secret items and place them in the secret room to win");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}		private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		var items = secretRoom.getItems();		var itemsInList = items.size();		if (itemsInList == 4)  {			areItemsPlacedInSecretRoom = true;		}		String commandWord = command.getCommandWord();		if ( commandWord.equals("help" )) {			printHelp();		} else if (commandWord.equals("go")) {			goToRoom(command);			if (currentRoom == secretRoom && areItemsPlacedInSecretRoom) {				System.out.println("Congratulations, you won!");				return true;			}			else if (currentRoom == secretRoom) {				System.out.println("If you want to win, place all your Items here and re-enter the room!");			}		} else if (commandWord.equals("map")) {			System.out.println("Map (all rooms)");			System.out.println("---------------");			for (Room room : map) {				System.out.print("- " );				if (room == currentRoom) {					System.out.print(">>> ");				}				System.out.println(room.shortDescription());			}		} else if (commandWord.equals("get")) {			if (command.hasSecondWord()) {				Item item = currentRoom.getItem(command.getSecondWord());				backpack.add(item);			}		} else if (commandWord.equals("put")) {			Item itemToPut=null;			for (Item item : backpack) {				if (item.getName().equals(command.getSecondWord())) {					itemToPut = item;					break;				}			}			if (itemToPut != null) {				currentRoom.add(itemToPut);				currentRoom.getItems();				backpack.remove(itemToPut);			}					} else if (commandWord.equals("show")) {			System.out.println("Backpack content");			System.out.println("----------------");			for (Item item : backpack)				System.out.println("- " + item.getName());					} else if (commandWord.equals("back")) {			if (!previousRooms.isEmpty()) {				currentRoom = previousRooms.pop();				System.out.println(currentRoom.longDescription());			} else 				System.out.println("Don't know where to go :(");					} else 			if (commandWord.equals("quit")) {			if (command.hasSecondWord()) 				System.out.println("Quit what?");			else 				return true;		}		return false;	}			private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goToRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				Room nextRoom = currentRoom.nextRoom(direction);			if (nextRoom == null)				System.out.println("There is no door!");			else {				previousRooms.push(currentRoom);				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());							}		}	}}